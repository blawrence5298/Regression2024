abline(h=0, col="red")
qqnorm(rstandard(lm2))
qqline(rstandard(lm2))
#versus
plot(resid(lm3) ~ fitted(lm3))
abline(h=0, col="red")
qqnorm(rstandard(lm3))
qqline(rstandard(lm3))
confint(lm3)
pacman::p_load(MASS, tidyverse)
data(Boston)
#head(Boston)
lmB <- lm(medv ~ dis + rm + tax + chas, data=Boston)
summary(lmB)
#Create a matrix of predictors using the dis, rm, tax, and chas columns of the Boston dataset, including a column of 1s to account for beta_0
X <- as.matrix(cbind(1, Boston[, c('dis', 'rm', 'tax', 'chas')]))
#Create a matrix of responses
Y <- as.matrix(Boston['medv'])
#Get the transpose of the predictors matrix
X_t <- t(X)
#Apply the least-squares estimates formula
Beta <- solve(X_t %*% X) %*% X_t %*% Y
Beta
#First we obtain the factors necessary to calculate the variance of predicted values
RSS <- sum((residuals(lmB))^2)
n <- nrow(Boston)
#Calculate sigma squared manually
sigma_squared <- RSS / (n - 4 - 1)
#Now we apply the given formula to obtain the covariance matrix
Cov <- sigma_squared * solve(X_t %*% X)
#From the matrix we isolate the diagonal entries and square root them to obtain the standard errors
Err <- sqrt(diag(Cov))
Err
pacman::p_load(tidyverse)
hdi <- read.csv("hdi2018.csv")
lm1 <- lm(hdi_2018 ~ median_age + pctpop65 + pct_internet + pct_labour, data=hdi)
summary(lm1)
lm2 <- lm(hdi_2018 ~ median_age + pct_internet, data=hdi)
anova(lm2, lm1)
summary(lm1)$adj.r.squared
summary(lm2)$adj.r.squared
pairs(hd_2018 ~ median_age + pct_internet, data=hdi)
pacman::p_load(tidyverse)
hdi <- read.csv("hdi2018.csv")
lm1 <- lm(hdi_2018 ~ median_age + pctpop65 + pct_internet + pct_labour, data=hdi)
summary(lm1)
lm2 <- lm(hdi_2018 ~ median_age + pct_internet, data=hdi)
anova(lm2, lm1)
summary(lm1)$adj.r.squared
summary(lm2)$adj.r.squared
pairs(hd_2018 ~ median_age + pct_internet, data=hdi)
pacman::p_load(tidyverse)
hdi <- read.csv("hdi2018.csv")
lm1 <- lm(hdi_2018 ~ median_age + pctpop65 + pct_internet + pct_labour, data=hdi)
summary(lm1)
pairs(hd_2018 ~ median_age + pct_internet, data=hdi)
pairs(hdi_2018 ~ median_age + pct_internet, data=hdi)
plot(lm2, 1)
qqnorm(rstandard(lm2))
qqline(rstandard(lm2))
p <- 2
n <- nrow(hdi)
plot(hatvalues(lm2), rstandard(lm2),
xlab="Leverage",
ylab="Standardized Residuals")
abline(v = 2*(p+1)/n, lty=2)
abline(h = -3, lty=2)
hdi[which(hatvalues(lm2) > 0.035 | rstandard(lm2) < -3), ]
p <- 2
n <- nrow(hdi)
plot(hatvalues(lm2), rstandard(lm2),
xlab="Leverage",
ylab="Standardized Residuals")
abline(v = 2*(p+1)/n, lty=2)
abline(h = -3, lty=2)
defects <- read.csv("defects.csv")
pairs(Defective ~ Temperature + Density + Rate, data=defects)
lm1 <- lm(Defective ~ Temperature + Density + Rate, data=defects)
par(mfrow=c(1,2), mar=c(4.5, 4.5, 2, 2))
plot(lm1, 1:2)
par(mfrow=c(1,3), mar=c(4.5, 4.5, 2, 2))
plot(defects$Temperature, rstandard(lm1),
xlab="Temperature", ylab="Standardized Residuals")
plot(defects$Density, rstandard(lm1),
xlab="Density", ylab="Standardized Residuals")
plot(defects$Rate, rstandard(lm1),
xlab="Rate", ylab="Standardized Residuals")
library(MASS)
library(car)
boxcox(lm1, lambda=seq(0.3, 0.65, by = 0.05))
summary(powerTransform(lm1))
lm2 <- lm(sqrt(Defective) ~ Temperature + Density +Rate, data=defects)
summary(lm2)
par(mfrow=c(1,2), mar=c(4.5,4.5, 2,2))
plot(lm2, 1:2)
#Using the Box-cox procedure, the estimated value of the parameter is lambda = 0.45
#The 95% confidence interval for lambda is between 0.33 and 0.58
#For interpretibility, we will round and use 0.5 as our applied lambda cause its in the confint and square roots are more intiutive
library(MASS)
library(car)
boxcox(lm1, lambda=seq(0.1, 0.75, by = 0.05))
summary(powerTransform(lm1))
#Using the Box-cox procedure, the estimated value of the parameter is lambda = 0.45
#The 95% confidence interval for lambda is between 0.33 and 0.58
#For interpretibility, we will round and use 0.5 as our applied lambda cause its in the confint and square roots are more intiutive
library(MASS)
library(car)
boxcox(lm1, lambda=seq(0.6, 0.75, by = 0.05))
summary(powerTransform(lm1))
#Using the Box-cox procedure, the estimated value of the parameter is lambda = 0.45
#The 95% confidence interval for lambda is between 0.33 and 0.58
#For interpretibility, we will round and use 0.5 as our applied lambda cause its in the confint and square roots are more intiutive
library(MASS)
library(car)
boxcox(lm1, lambda=seq(0.5, 0.75, by = 0.05))
summary(powerTransform(lm1))
#Using the Box-cox procedure, the estimated value of the parameter is lambda = 0.45
#The 95% confidence interval for lambda is between 0.33 and 0.58
#For interpretibility, we will round and use 0.5 as our applied lambda cause its in the confint and square roots are more intiutive
library(MASS)
library(car)
boxcox(lm1, lambda=seq(0.4, 0.75, by = 0.05))
summary(powerTransform(lm1))
#Using the Box-cox procedure, the estimated value of the parameter is lambda = 0.45
#The 95% confidence interval for lambda is between 0.33 and 0.58
#For interpretibility, we will round and use 0.5 as our applied lambda cause its in the confint and square roots are more intiutive
library(MASS)
library(car)
boxcox(lm1, lambda=seq(0.2, 0.75, by = 0.05))
summary(powerTransform(lm1))
county_votes16 <- readRDS("county_votes16.rds")
head(county_votes16)
set.seed(999)
n <- nrow(county_votes16)
set.seed(999)
n <- nrow(county_votes16); n
set.seed(999)
n <- nrow(county_votes16); n
floor(0.7*n)
#randomly sample 70% of rows for training set (2178)
train <- sample(1:n, 2178)
glm_train <- glm(trump_win ~ obama_pctvotes, data=county_votes16,
subsset = train, family = binomial)
#randomly sample 70% of rows for training set (2178)
train <- sample(1:n, 2178)
glm_train <- glm(trump_win ~ obama_pctvotes, data=county_votes16,
subset = train, family = binomial)
summary(glm_train)
set.seed(999)
n <- nrow(county_votes16); n
floor(0.7*n)
#randomly sample 70% of rows for training set (2178)
train <- sample(1:n, 2178)
glm_train <- glm(trump_win ~ obama_pctvotes, data=county_votes16,
subset = train, family = binomial)
summary(glm_train)
#subset data frame for testing observations
county_votes16 <- county_votes16[-train, ]
#Make predictions for proababilities on test set
probs_test <- predict(glm_train, newdata = county_votes16_test,
type = "response")
county_votes16 <- readRDS("county_votes16.rds")
head(county_votes16)
#subset data frame for testing observations
county_votes16_test <- county_votes16[-train, ]
#Make predictions for proababilities on test set
probs_test <- predict(glm_train, newdata = county_votes16_test,
type = "response")
#We can use a 0.5 probability threshold to classify pointss in the test set.. If the predictted probability is greater than 0.5, classify as a Trump win (1). Otherwise if the predicted probability is less than 0.5, classify as a Trump loss (0).
length(probs_tesst)
#We can use a 0.5 probability threshold to classify pointss in the test set.. If the predictted probability is greater than 0.5, classify as a Trump win (1). Otherwise if the predicted probability is less than 0.5, classify as a Trump loss (0).
length(probs_test)
preds_test <- rep(0,934)
preds_test[probs_test > 0.5] <- 1
head(probs_tesst)
#We can use a 0.5 probability threshold to classify pointss in the test set.. If the predictted probability is greater than 0.5, classify as a Trump win (1). Otherwise if the predicted probability is less than 0.5, classify as a Trump loss (0).
length(probs_test)
preds_test <- rep(0,934)
preds_test[probs_test > 0.5] <- 1
head(probs_test)
#We can use a 0.5 probability threshold to classify pointss in the test set.. If the predictted probability is greater than 0.5, classify as a Trump win (1). Otherwise if the predicted probability is less than 0.5, classify as a Trump loss (0).
length(probs_test)
preds_test <- rep(0,934)
preds_test[probs_test > 0.5] <- 1
head(probs_test)
head(preds_test)
#We can use a 0.5 probability threshold to classify pointss in the test set.. If the predictted probability is greater than 0.5, classify as a Trump win (1). Otherwise if the predicted probability is less than 0.5, classify as a Trump loss (0).
length(probs_test)
preds_test <- rep(0,934)
preds_test[probs_test > 0.5] <- 1
head(probs_test)
head(preds_test)
tb <- table(prediction = preds_test,
actual = county_votes16_test$trump_win)
addmargins(tb)
#Accuracy (percent correctly classified)
(tb[1,1] + tb[2,2]) / 934
#Sensitivity (percent of Trump wins (1) correctly classified)
tb[2,2] / 785
tb[1,1] / 149
library(pROC)
install.packages(pROC)
install.packages("pROC")
library(pROC)
roc_obj <- roc(county_votes16_test$trump_win, probs_test)
plot(1 - roc_obj$specificities, roc_obj$sensitivities, type="1",
xlab="1 - Specificity", ylab = "Sensitivity")
library(pROC)
roc_obj <- roc(county_votes16_test$trump_win, probs_test)
plot(1 - roc_obj$specificities, roc_obj$sensitivities, type="1",
xlab="1 - Specificity", ylab = "Sensitivity")
library(pROC)
roc_obj <- roc(county_votes16_test$trump_win, probs_test)
plot(1 - roc_obj$specificities, roc_obj$sensitivities, type="l",
xlab="1 - Specificity", ylab = "Sensitivity")
points(x=24/149, y=763/785, col="red", pch=19)
abline(0,1,lty=2)
suppressMessages(library(ggplot2))
suppressMessages(library(plotly))
suppressMessages(library(ggplot2))
suppressMessages(library(plotly))
snails <- read.csv("seasnails.csv")
head(snails)
snails$age <- snails$Rings + 1.5
head(snails)
pairs(age ~ Sex + Length + Diameter + Height + Whole_weight,
+ Shucked_weight + Viscera_weight + Shell_weight + Rings, data=snails)
snails <- read.csv("seasnails.csv")
#Create new variable age
snails$age <- snails$Rings + 1.5
head(snails)
snails$Sex <- factor(snails$Sex)
snails <- read.csv("seasnails.csv")
#Create new variable age
snails$age <- snails$Rings + 1.5
head(snails)
snails[0] <- lapply(snails[0], factor)
snails <- read.csv("seasnails.csv")
#Create new variable age
snails$age <- snails$Rings + 1.5
head(snails)
snails[0, ] <- lapply(snails[0, ], factor)
snails <- read.csv("seasnails.csv")
#Create new variable age
snails$age <- snails$Rings + 1.5
head(snails)
snails[1, ] <- lapply(snails[1, ], factor)
snails <- read.csv("seasnails.csv")
#Create new variable age
snails$age <- snails$Rings + 1.5
head(snails)
pairs(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight,
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
pairs(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight,
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
snails <- read.csv("seasnails.csv")
#Create new variable age
snails$age <- snails$Rings + 1.5
head(snails)
pairs(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight,
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
pairs(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
#full model
lm_full <- lm(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
suppressMessages(library(ggplot2))
suppressMessages(library(plotly))
library(MASS)
library(car)
#full model
lm_full <- lm(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
boxcox(lm_full, lambda=seq(0.1, 0.9, by = 0.05))
summary(powerTransform(lm_full))
#full model
lm_full <- lm(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
boxcox(lm_full, lambda=seq(0.05, 0.2, by = 0.05))
summary(powerTransform(lm_full))
#full model
lm_full <- lm(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
boxcox(lm_full, lambda=seq(0.0001, 0.2, by = 0.01))
summary(powerTransform(lm_full))
#full model
lm_full <- lm(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
boxcox(lm_full, lambda=seq(0.1, 0.9, by = 0.05))
summary(powerTransform(lm_full))
#full model
lm_full <- lm(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
boxcox(lm_full, lambda=seq(0.00001, 0.9, by = 0.05))
summary(powerTransform(lm_full))
#full model
lm_full <- lm(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
summary(lm_full)
boxcox(lm_full, lambda=seq(0.1, 0.9, by = 0.05))
summary(powerTransform(lm_full))
#full model
lm_full <- lm(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
summary(lm_full)
boxcox(lm_full, lambda=seq(0.1, 0.2, by = 0.05))
summary(powerTransform(lm_full))
#full model
lm_full <- lm(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
summary(lm_full)
boxcox(lm_full, lambda=seq(0, 0.1, by = 0.05))
summary(powerTransform(lm_full))
#full model
lm_full <- lm(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
summary(lm_full)
boxcox(lm_full, lambda=seq(0, 0.9, by = 0.05))
summary(powerTransform(lm_full))
#full model
lm_full <- lm(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
summary(lm_full)
boxcox(lm_full, lambda=seq(0.0001, 0.1, by = 0.05))
summary(powerTransform(lm_full))
#full model
lm_full <- lm(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
summary(lm_full)
boxcox(lm_full, lambda=seq(0, 0.1, by = 0.05))
summary(powerTransform(lm_full))
#full model
lm_full <- lm(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
summary(lm_full)
boxcox(lm_full, lambda=seq(-1, 0.1, by = 0.05))
summary(powerTransform(lm_full))
#full model
lm_full <- lm(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
summary(lm_full)
boxcox(lm_full, lambda=seq(-0.3, 0.1, by = 0.05))
summary(powerTransform(lm_full))
#full model
lm_full <- lm(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
summary(lm_full)
boxcox(lm_full, lambda=seq(-0.2, 0.1, by = 0.05))
summary(powerTransform(lm_full))
#full model
lm_full <- lm(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
summary(lm_full)
boxcox(lm_full, lambda=seq(-0.4, 0.1, by = 0.05))
summary(powerTransform(lm_full))
#full model
lm_full <- lm(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
summary(lm_full)
boxcox(lm_full, lambda=seq(-0.35, -0.225, by = 0.05))
summary(powerTransform(lm_full))
#full model
lm_full <- lm(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
summary(lm_full)
boxcox(lm_full, lambda=seq(-0.35, -0.2, by = 0.05))
summary(powerTransform(lm_full))
#full model
lm_full <- lm(age ~ factor(Sex) + Length + Diameter + Height + Whole_weight
+ Shucked_weight + Viscera_weight + Shell_weight, data=snails)
summary(lm_full)
boxcox(lm_full, lambda=seq(-0.36, -0.2, by = 0.05))
summary(powerTransform(lm_full))
lm_transformed <- lm((age)^(-0.3) ~ factor(Sex) + Length + Diameter + Height + Whole_weight + Shucked_weight + Viscera_weight + Shell_weight, data=snails)
lm_transformed <- lm((age)^(-0.3) ~ factor(Sex) + Length + Diameter + Height + Whole_weight + Shucked_weight + Viscera_weight + Shell_weight, data=snails)
summary(lm_transformed)
lm_trimmed <- step(lm_transformed)
summary(lm_trimmed)
#Plots of Residuals, Leverage, and QQ
lm_diag(lm_trimmed)
#Functions to quickly make diagnostics
#Creates basic scatter plots
gg_basic <- function(data, x, y) {
plot <- ggplot(data = data, aes(x = {{x}}, y = {{y}})) +
geom_point()
return(plot)
}
#Creates a 2x2 grid of basic diagnostic plots of a lm object
lm_diag <- function(lm_model) {
p1 <- gg_basic(lm_model$model, fitted(lm_model), residuals(lm_model)) +
labs(x="Fitted Values", y="Residuals")
p2 <- gg_basic(lm_model$model, fitted(lm_model), rstandard(lm_model)) +
labs(x="Fitted Values", y="Standardized Residuals")
p3 <- gg_basic(lm_model$model, fitted(lm_model), hatvalues(lm_model)) +
labs(x="Fitted Values", y="Leverage")
# Create QQ plot of standardized residuals
p4 <- ggplot(lm_model$model, aes(sample = rstandard(lm_model))) +
stat_qq() +
stat_qq_line(colour="red") +
labs(x ="Theoretical Quantiles", y="Sample Quantiles") +
ggtitle("QQ Plot of Standardized Residuals")
# Arrange all plots into a grid
return(grid.arrange(p1, p2, p3, p4, ncol=2, nrow=2))
}
#Plots of Residuals, Leverage, and QQ
lm_diag(lm_trimmed)
suppressMessages(library(ggplot2))
suppressMessages(library(plotly))
library(MASS)
library(car)
library(gridExtra)
#Functions to quickly make diagnostics
#Creates basic scatter plots
gg_basic <- function(data, x, y) {
plot <- ggplot(data = data, aes(x = {{x}}, y = {{y}})) +
geom_point()
return(plot)
}
#Creates a 2x2 grid of basic diagnostic plots of a lm object
lm_diag <- function(lm_model) {
p1 <- gg_basic(lm_model$model, fitted(lm_model), residuals(lm_model)) +
labs(x="Fitted Values", y="Residuals")
p2 <- gg_basic(lm_model$model, fitted(lm_model), rstandard(lm_model)) +
labs(x="Fitted Values", y="Standardized Residuals")
p3 <- gg_basic(lm_model$model, fitted(lm_model), hatvalues(lm_model)) +
labs(x="Fitted Values", y="Leverage")
# Create QQ plot of standardized residuals
p4 <- ggplot(lm_model$model, aes(sample = rstandard(lm_model))) +
stat_qq() +
stat_qq_line(colour="red") +
labs(x ="Theoretical Quantiles", y="Sample Quantiles") +
ggtitle("QQ Plot of Standardized Residuals")
# Arrange all plots into a grid
return(grid.arrange(p1, p2, p3, p4, ncol=2, nrow=2))
}
#Plots of Residuals, Leverage, and QQ
lm_diag(lm_trimmed)
new <- data.frame(Sex = "M", Length = 0.5, Diameter = 0.41, Height = 0.15, Whole_weight = 0.8, Shucked_weight = 0.4, Viscera_weight = 0.2, Shell_weight = 0.25)
new
new <- data.frame(Sex = "M", Length = 0.5, Diameter = 0.41, Height = 0.15, Whole_weight = 0.8, Shucked_weight = 0.4, Viscera_weight = 0.2, Shell_weight = 0.25)
predict(lm_trimmed, newdata = new, interval = predict)
new <- data.frame(Sex = "M", Length = 0.5, Diameter = 0.41, Height = 0.15, Whole_weight = 0.8, Shucked_weight = 0.4, Viscera_weight = 0.2, Shell_weight = 0.25)
predict(lm_trimmed, newdata = new, interval = "prediction")
newss <- snails %>% filter(Sex != "I") %>% mutate(Sex = as.factor(Sex))
newss <- snails %>% filter(Sex != "I") %>% mutate(Sex = as.factor(Sex))
head(newss)
glm1 <- glm(Sex)
newss <- snails %>% filter(Sex != "I") %>% mutate(Sex = as.factor(Sex))
head(newss)
#glm1 <- glm(Sex)
newss <- snails %>% filter(Sex != "I") %>% mutate(Sex = as.factor(Sex))
head(newss)
glm1 <- glm(Sex ~ . -age, data=newss, family=binomial)
summary(glm1)
newss <- snails %>% filter(Sex != "I") %>% mutate(Sex = as.factor(Sex))
head(newss)
glm_full <- glm(Sex ~ . -age, data=newss, family=binomial)
summary(glm_full)
glm_trimmed <- step(glm_full)
summary(glm_trimmed)
p1 <- ggplot(newss, aes(Sex, Shucked_weight)) + geom_point() + geom_smooth(method="glm", method.args = list(family = "binomial"), se=F)
ggplotly(p1)
suppressMessages(source("setup.R"))
head(math_perf)
p1 <- ggplot(newss, aes(Shucked_weight, Sex)) + geom_point() + geom_smooth(method="glm", method.args = list(family = "binomial"), se=F)
p1 <- ggplot(newss, aes(Shucked_weight, Sex)) + geom_point() + geom_smooth(method="glm", method.args = list(family = "binomial"), se=F)
ggplotly(p1)
newss <- snails %>% filter(Sex != "I") %>% mutate(Sex = as.factor(Sex))
head(newss)
glm_full <- glm(Sex ~ . -age, data=newss, family=binomial)
summary(glm_full)
ggplot(newss, aes(Shucked_weight, Sex)) + geom_point() + geom_smooth(method="glm", method.args = list(family = "binomial"), se=F)
ggplot(newss, aes(Diameter, Sex)) + geom_point() + geom_smooth(method="glm", method.args = list(family = "binomial"), se=F)
ggplot(newss, aes(fitted(glm_trimmed), Sex)) + geom_point() + geom_smooth(method="glm", method.args = list(family = "binomial"), se=F)
ggplot(newss, aes(Shucked_weight, Sex)) + geom_point() + geom_smooth(method="glm", method.args = list(family = "binomial"), se=F)
log_new <- data.frame(Length = 0.5, Diameter = 0.41, Height = 0.15, Whole_weight = 0.8, Shucked_weight = 0.4, Viscera_weight = 0.2, Shell_weight = 0.25, Rings = 9)
predict(glm_trimmed, newdata = log_new, interval = "prediction")
roc_obj <- roc(newss$Sex, probs_test)
roc_obj <- roc(Sex ~ . -age, data=newss)
roc_obj <- roc(newss$Sex)
roc_obj <- roc(newss)
roc_obj <- roc(newss, Sex, Diameter, Height)
roc_obj <- roc(data=newss, Sex, Diameter, Height)
roc_obj <- roc(data=newss, Sex, Diameter)
plot(1 - roc_obj$specificities, roc_obj$sensitivities, type="l",
xlab="1 - Specificity", ylab = "Sensitivity")
abline(0,1,lty=2)
help(roc_obj)
suppressMessages(library(ggplot2))
suppressMessages(library(plotly))
library(MASS)
library(car)
library(gridExtra)
library(pROC)
roc_obj <- roc(newss$Sex)
probs <- predict(glm_trimmed, newdata = newss, type = "response")
roc_obj <- roc(newss$Sex, probs)
plot(1 - roc_obj$specificities, roc_obj$sensitivities, type="l",
xlab="1 - Specificity", ylab = "Sensitivity")
abline(0,1,lty=2)
probs <- predict(glm_trimmed, newdata = newss, type = "response")
roc_obj <- roc(newss$Sex, probs)
plot(1 - roc_obj$specificities, roc_obj$sensitivities, type="l",
xlab="1 - Specificity", ylab = "Sensitivity")
abline(0,1,lty=2)
auc(roc_obj)
suppressMessages(library(ggplot2))
suppressMessages(library(plotly))
suppressMessages(library(MASS))
suppressMessages(library(car))
suppressMessages(library(gridExtra))
suppressMessages(library(pROC))
