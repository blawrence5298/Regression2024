ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
ggplotly(p2)
# Assuming 'rstd' contains your standardized residuals
df <- data.frame(sample = rstd)
# Generating a QQ plot directly with Plotly
fig <- plot_ly(df, y = ~sample, type = 'qq')
# Customizing the plot
fig <- fig %>% layout(title = 'QQ Plot of Standardized Residuals',
xaxis = list(title = 'Theoretical Quantiles'),
yaxis = list(title = 'Standardized Residuals'))
# Display the plot
fig
rstd <- rstandard(lm2)
p2 <- ggplot(data.frame(sample = rstd), aes(sample = sample)) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
ggplotly(p2)
rstd <- rstandard(lm2)
p2 <- ggplot(data.frame(sample = rstd), aes(sample = sample)) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
ggplotly(p2)
# Assuming 'p2' is your ggplot object
p2_plotly <- ggplotly(p2)
# Adjusting labels and titles
p2_plotly <- p2_plotly %>%
layout(title = 'Customized QQ Plot of Standardized Residuals',
xaxis = list(title = 'Custom Theoretical Quantiles'),
yaxis = list(title = 'Custom Standardized Residuals'))
# Display the customized Plotly plot
p2_plotly
rstd <- rstandard(lm2)
p2 <- ggplot(data.frame(sample = rstd), aes(sample = sample)) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
# Assuming 'p2' is your ggplot object
p2_plotly <- ggplotly(p2)
# Adjusting labels and titles
p2_plotly <- p2_plotly %>%
layout(title = 'Customized QQ Plot of Standardized Residuals',
xaxis = list(title = 'Custom Theoretical Quantiles'),
yaxis = list(title = 'Custom Standardized Residuals'))
# Display the customized Plotly plot
p2_plotly
rstd <- rstandard(lm2)
p2 <- ggplot(data.frame(sample = rstd), aes(sample = sample)) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
# Assuming 'p2' is your ggplot object
p2_plotly <- ggplotly(p2)
# Customizing hover labels
p2_plotly <- style(p2_plotly, hoverinfo = 'text', text = ~paste('Theoretical Quantiles:', formatC(x, format = 'f', digits = 2), '<br>Standardized Residuals:', formatC(y, format = 'f', digits = 2)))
# Display the plot with customized hover labels
p2_plotly
# Assuming 'p2' is your original ggplot2 object without custom hover info
# Update your ggplot object to include custom hover text in aes()
p2 <- ggplot(data.frame(rstd = rstd), aes(sample = rstd, text = paste('Theoretical Quantiles:', formatC(..x.., format = 'f', digits = 2), 'Standardized Residuals:', formatC(..y.., format = 'f', digits = 2)))) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
# Convert your ggplot object to Plotly
p2_plotly <- ggplotly(p2, tooltip = "text")
# Assuming 'p2' is your original ggplot2 object without custom hover info
# Update your ggplot object to include custom hover text in aes()
p2 <- ggplot(data.frame(rstd = rstd), aes(sample = rstd, text = paste('Theoretical Quantiles:', formatC("Jeff", format = 'f', digits = 2), 'Standardized Residuals:', formatC("Todd", format = 'f', digits = 2)))) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
# Convert your ggplot object to Plotly
p2_plotly <- ggplotly(p2, tooltip = "text")
# Display the plot
p2_plotly
rstd <- rstandard(lm2)
p2 <- ggplot(data.frame(rstd = rstd), aes(sample = rstd, text = paste('Theoretical Quantiles:', formatC("Jeff", format = 'f', digits = 2), 'Standardized Residuals:', formatC("Todd", format = 'f', digits = 2)))) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
ggplot(p2)
rstd <- rstandard(lm2)
p2 <- ggplot(data.frame(rstd = rstd), aes(sample = rstd, text = paste('Theoretical Quantiles:', formatC("Jeff", format = 'f', digits = 2), 'Standardized Residuals:', formatC("Todd", format = 'f', digits = 2)))) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
rstd <- rstandard(lm2)
p2 <- ggplot(data.frame(rstd = rstd), aes(sample = rstd, text = paste('Theoretical Quantiles:', formatC("Jeff", format = 'f', digits = 2), 'Standardized Residuals:', formatC("Todd", format = 'f', digits = 2)))) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
ggplotly(p2)
rstd <- rstandard(lm2)
p2 <- ggplot(data.frame(rstd = rstd), aes(sample = rstd, text = paste('Theoretical Quantiles:', formatC("Jeff", format = 'f', digits = 2), 'Standardized Residuals:', formatC("Todd", format = 'f', digits = 2)))) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
ggplotly(p2, tooltip="text")
rstd <- rstandard(lm2)
p2 <- ggplot(data.frame(rstd = rstd), aes(sample = rstd, text = paste('Theoretical Quantiles:', formatC("Jeff", format = 'f', digits = 2), '<br>Standardized Residuals:', formatC("Todd", format = 'f', digits = 2)))) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
ggplotly(p2, tooltip="text")
rstd <- rstandard(lm2)
p2 <- ggplot(data.frame(rstd = rstd), aes(sample = rstd, text = paste('Theoretical Quantiles:', formatC( format = 'f', digits = 2), '<br>Standardized Residuals:', formatC(format = 'f', digits = 2)))) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
ggplotly(p2, tooltip="text")
rstd <- rstandard(lm2)
p2 <- ggplot(data.frame(rstd = rstd), aes(sample = rstd, text = paste('Theoretical Quantiles:', formatC( format = 'f', digits = 2), '<br>Standardized Residuals:', formatC(format = 'f', digits = 2)))) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
ggplotly(p2)
rstd <- rstandard(lm2)
df2 <- data.frame(tquant = qqnorm(rstd, plot.it = FALSE)$x, rstd = rstd)
p2 <- ggplot(df2, aes(sample = rstd, text = paste('Theoretical Quantiles:', formatC(tquant, format = 'f', digits = 2), '<br>Standardized Residuals:', formatC(rstd, format = 'f', digits = 2)))) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
ggplotly(p2)
rstd <- rstandard(lm2)
df2 <- data.frame(tquant = qqnorm(rstd, plot.it = FALSE)$x, rstd = rstd)
p2 <- ggplot(df2, aes(sample = rstd, text = paste('Theoretical Quantiles:', formatC(tquant, format = 'f', digits = 2), '<br>Standardized Residuals:', formatC(rstd, format = 'f', digits = 2)))) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
df2$tquant
rstd <- rstandard(lm2)
df2 <- data.frame(tquant = qqnorm(rstd, plot.it = FALSE)$x, rstd = rstd)
p2 <- ggplot(df2, aes(sample = rstd, text = paste('Theoretical Quantiles:', formatC(tquant, format = 'f', digits = 2), '<br>Standardized Residuals:', formatC(rstd, format = 'f', digits = 2)))) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
head(df2)
rstd <- rstandard(lm2)
df2 <- data.frame(tquant = qqnorm(rstd, plot.it = FALSE)$x, rstd = rstd)
p2 <- ggplot(data=df2, aes(tquant,rstd )) +
geom_point() +
labs( x="Theoretical Quantities", y="Standardized Residuals")
ggplotly(p2)
rstd <- rstandard(lm2)
df2 <- data.frame(tquant = qqnorm(rstd, plot.it = FALSE)$x, rstd = rstd)
p2 <- ggplot(data=df2, aes(tquant,rstd )) +
geom_point() +
stat_qq_line() +
labs( x="Theoretical Quantities", y="Standardized Residuals")
ggplotly(p2)
rstd <- rstandard(lm2)
df2 <- data.frame(tquant = qqnorm(rstd, plot.it = FALSE)$x, rstd = rstd)
p2 <- ggplot(data=df2, aes(tquant,rstd, sample = rstd )) +
geom_point() +
stat_qq_line() +
labs( x="Theoretical Quantities", y="Standardized Residuals")
ggplotly(p2)
rstd <- rstandard(lm2)
df2 <- data.frame(tquant = qqnorm(rstd, plot.it = FALSE)$x, rstd = rstd)
p2 <- ggplot(data=df2, aes(tquant,rstd, sample = rstd )) +
geom_point() +
stat_qq_line() +
labs( x="Theoretical Quantities", y="Standardized Residuals")
ggplot_ly(p2)
rstd <- rstandard(lm2)
df2 <- data.frame(tquant = qqnorm(rstd, plot.it = FALSE)$x, rstd = rstd)
p2 <- ggplot(data=df2, aes(tquant,rstd, sample = rstd )) +
geom_point() +
stat_qq_line() +
labs( x="Theoretical Quantities", y="Standardized Residuals")
ggplotly(p2)
rstd <- rstandard(lm2)
df2 <- data.frame(tquant = qqnorm(rstd, plot.it = FALSE)$x, rstd = rstd)
p2 <- ggplot(data=df2, aes(tquant,rstd, sample = rstd )) +
geom_point() +
stat_qq_line() +
labs( x="Theoretical Quantities", y="Standardized Residuals")
p2 <- ggplotly(p2)
p2 %>% layout(title = 'Styled Scatter',
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE)
rstd <- rstandard(lm2)
df2 <- data.frame(tquant = qqnorm(rstd, plot.it = FALSE)$x, rstd = rstd)
p2 <- ggplot(data=df2, aes(tquant,rstd, sample = rstd )) +
geom_point() +
stat_qq_line() +
labs( x="Theoretical Quantities", y="Standardized Residuals")
p2 <- ggplotly(p2)
p2 <- p2 %>% layout(title = 'Styled Scatter',
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE)
rstd <- rstandard(lm2)
p2 <- ggplot(data.frame(rstd = rstd), aes(sample=rstd)) +
geom_qq()
ggplotly(p2)
rstd <- rstandard(lm2)
p2 <- ggplot(data.frame(rstd = rstd), aes(sample=rstd)) +
stat_qq() +
stat_qq_line() +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
ggplotly(p2)
rstd <- rstandard(lm2)
p2 <- ggplot(data.frame(rstd = rstd), aes(sample=rstd)) +
stat_qq() +
stat_qq_line(color = "red") +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
ggplotly(p2)
rstd <- rstandard(lm2)
p2 <- ggplot(aes(sample=rstd)) +
stat_qq() +
stat_qq_line(color = "red") +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
rstd <- rstandard(lm2)
p2 <- ggplot(sample=rstd) +
stat_qq() +
stat_qq_line(color = "red") +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
ggplotly(p2)
rstd <- rstandard(lm2)
p2 <- ggplot(data.frame(rstd = rstd), aes(sample=rstd)) +
stat_qq() +
stat_qq_line(color = "red") +
ggtitle("QQ Plot of Standardized Residuals") +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals")
ggplotly(p2)
lev <- hatvalues(lm2)
rstd <- rstandard(lm2)
p2 <- ggplot(data.frame(rstd = rstd), aes(sample=rstd)) +
stat_qq() +
stat_qq_line(color = "red") +
labs(x="Theoretical Quanities",y="Standardized Residuals")
ggplotly(p2)
lev <- hatvalues(lm2)
p3 <- ggplot(data.frame(rstd = rstd, lev = lev),aes(lev,rstd)) +
geom_point() +
labs( x="Leverage Values", y="Standardized Residuals")
lev <- hatvalues(lm2)
p3 <- ggplot(data.frame(rstd = rstd, lev = lev),aes(lev,rstd)) +
geom_point() +
labs( x="Leverage Values", y="Standardized Residuals")
ggplotly(p3)
n <- nrow(hdi2018)
#Subtract to exclude the intercept
p <- length(lm2$coefficients) - 1
threshold <- 2 * (p + 1) / n
high_lev <- hdi2018[lev <= threshold, ]
head(high_lev)
n <- nrow(hdi2018)
#Subtract to exclude the intercept
p <- length(lm2$coefficients) - 1
threshold <- 2 * (p + 1) / n
high_lev <- hdi2018[lev <= threshold, ]
high_lev
n <- nrow(hdi2018)
#Subtract to exclude the intercept
p <- length(lm2$coefficients) - 1
threshold <- 2 * (p + 1) / n
threshold
# high_lev <- hdi2018[lev <= threshold, ]
# high_lev
hdi2018 <- read.csv("hdi2018.csv")
head(hdi2018)
lm1 <- lm(hdi_2018 ~ median_age + pctpop65 + pct_internet + pct_labour, data=hdi2018)
summary(lm1)
lm2 <- lm(hdi_2018 ~ median_age + pct_internet, data = hdi2018)
summary(lm2)
anova(lm2, lm1)
summary(lm1)$adj.r.squared
summary(lm2)$adj.r.squared
library(ggplot2)
library(plotly)
pairs(~hdi_2018 + median_age + pct_internet, data=hdi2018)
resid1 <- residuals(lm2)
fit1 <- fitted(lm2)
df1 <- data.frame(fit1 = fit1, resid1 = resid1)
p1 <- ggplot(data=df1, aes(fit1,resid1 )) +
geom_point() +
labs( x="Fitted Values", y="Residuals")
ggplotly(p1)
rstd <- rstandard(lm2)
p2 <- ggplot(data.frame(rstd = rstd), aes(sample=rstd)) +
stat_qq() +
stat_qq_line(color = "red") +
labs(x="Theoretical Quanities",y="Standardized Residuals")
ggplotly(p2)
lev <- hatvalues(lm2)
p3 <- ggplot(data.frame(rstd = rstd, lev = lev),aes(lev,rstd)) +
geom_point() +
labs( x="Leverage Values", y="Standardized Residuals")
ggplotly(p3)
n <- nrow(hdi2018)
#Subtract to exclude the intercept
p <- length(lm2$coefficients) - 1
threshold <- 2 * (p + 1) / n
threshold
# high_lev <- hdi2018[lev <= threshold, ]
# high_lev
1 + 1
n <- nrow(hdi2018)
#Subtract to exclude the intercept
p <- length(lm2$coefficients) - 1
threshold <- 2 * (p + 1) / n
threshold
high_lev <- hdi2018[lev >= threshold, ]
high_lev
n <- nrow(hdi2018)
#Subtract to exclude the intercept
p <- length(lm2$coefficients) - 1
threshold <- 2 * (p + 1) / n
threshold
high_lev <- hdi2018[lev >= threshold, ]$country
high_lev
n <- nrow(hdi2018)
#Subtract to exclude the intercept
p <- length(lm2$coefficients) - 1
threshold <- 2 * (p + 1) / n
high_lev <- hdi2018[lev >= threshold, ]$country
high_lev
n <- nrow(hdi2018)
n
#Subtract to exclude the intercept
p <- length(lm2$coefficients) - 1
threshold <- 2 * (p + 1) / n
high_lev <- hdi2018[lev >= threshold, ]$country
high_lev
n <- nrow(hdi2018)
#Subtract to exclude the intercept
p <- length(lm2$coefficients) - 1
threshold <- 2 * (p + 1) / n
high_lev <- hdi2018[lev >= threshold, ]$country
high_lev
n <- nrow(hdi2018)
#Subtract to exclude the intercept
p <- length(lm2$coefficients) - 1
lev_threshold <- 2 * (p + 1) / n
high_lev <- hdi2018[lev >= lev_threshold, ]$country
outlier <- hdi2018[rstd > 2 | rstd < 2, ]$country
n <- nrow(hdi2018)
#Subtract to exclude the intercept
p <- length(lm2$coefficients) - 1
lev_threshold <- 2 * (p + 1) / n
high_lev <- hdi2018[lev >= lev_threshold, ]$country
outlier <- hdi2018[rstd > 2 | rstd < 2, ]$country
influential <- data.frame(high_lev = high_lev, outlier = outlier)
n <- nrow(hdi2018)
#Subtract to exclude the intercept
p <- length(lm2$coefficients) - 1
lev_threshold <- 2 * (p + 1) / n
high_lev <- hdi2018[lev >= lev_threshold, ]$country
outlier <- hdi2018[rstd > 2 | rstd < -2, ]$country
influential <- unique(c(high_lev, outlier))
n <- nrow(hdi2018)
#Subtract to exclude the intercept
p <- length(lm2$coefficients) - 1
lev_threshold <- 2 * (p + 1) / n
high_lev <- hdi2018[lev >= lev_threshold, ]$country
outlier <- hdi2018[rstd > 2 | rstd < -2, ]$country
influential <- unique(c(high_lev, outlier))
influential
n <- nrow(hdi2018)
#Subtract to exclude the intercept
p <- length(lm2$coefficients) - 1
lev_threshold <- 2 * (p + 1) / n
high_lev <- hdi2018[lev >= lev_threshold, ]$country
outlier <- hdi2018[rstd > 2 | rstd < -2, ]$country
all_countries <- unique(c(high_lev, outlier))
# Initialize a dataframe from the unique countries
influential_df <- data.frame(country = all_countries)
# Mark each country as 'Yes' or 'No' for being a high leverage point
influential_df$high_lev <- ifelse(influential_df$country %in% high_lev, "Yes", "No")
# Mark each country as 'Yes' or 'No' for being an outlier
influential_df$outlier <- ifelse(influential_df$country %in% outlier, "Yes", "No")
n <- nrow(hdi2018)
#Subtract to exclude the intercept
p <- length(lm2$coefficients) - 1
lev_threshold <- 2 * (p + 1) / n
high_lev <- hdi2018[lev >= lev_threshold, ]$country
outlier <- hdi2018[rstd > 2 | rstd < -2, ]$country
all_countries <- unique(c(high_lev, outlier))
# Initialize a dataframe from the unique countries
influential_df <- data.frame(country = all_countries)
# Mark each country as 'Yes' or 'No' for being a high leverage point
influential_df$high_lev <- ifelse(influential_df$country %in% high_lev, "Yes", "No")
# Mark each country as 'Yes' or 'No' for being an outlier
influential_df$outlier <- ifelse(influential_df$country %in% outlier, "Yes", "No")
n <- nrow(hdi2018)
#Subtract to exclude the intercept
p <- length(lm2$coefficients) - 1
lev_threshold <- 2 * (p + 1) / n
high_lev <- hdi2018[lev >= lev_threshold, ]$country
outlier <- hdi2018[rstd > 2 | rstd < -2, ]$country
all_countries <- unique(c(high_lev, outlier))
# Initialize a dataframe from the unique countries
influential_df <- data.frame(country = all_countries)
# Mark each country as 'Yes' or 'No' for being a high leverage point
influential_df$high_lev <- ifelse(influential_df$country %in% high_lev, "Yes", "No")
# Mark each country as 'Yes' or 'No' for being an outlier
influential_df$outlier <- ifelse(influential_df$country %in% outlier, "Yes", "No")
influential_df
n <- nrow(hdi2018)
#Subtract to exclude the intercept
p <- length(lm2$coefficients) - 1
lev_threshold <- 2 * (p + 1) / n
high_lev <- hdi2018[lev >= lev_threshold, ]$country
outlier <- hdi2018[rstd > 2 | rstd < -2, ]$country
all_countries <- unique(c(high_lev, outlier))
influential_df <- data.frame(country = all_countries)
# Mark each country as 'Yes' or 'No' for being a high leverage point
influential_df$high_lev <- ifelse(influential_df$country %in% high_lev, "Yes", "No")
# Mark each country as 'Yes' or 'No' for being an outlier
influential_df$outlier <- ifelse(influential_df$country %in% outlier, "Yes", "No")
influential_df
n <- nrow(hdi2018)
#Subtract to exclude the intercept
p <- length(lm2$coefficients) - 1
lev_threshold <- 2 * (p + 1) / n
high_lev <- hdi2018[lev >= lev_threshold, ]$country
outlier <- hdi2018[rstd > 2 | rstd < -2, ]$country
all_countries <- unique(c(high_lev, outlier))
influential_df <- data.frame(country = all_countries)
# Mark each country as 'Yes' or 'No' for being a high leverage point
influential_df$high_lev <- ifelse(influential_df$country %in% high_lev, "Yes", "No")
# Mark each country as 'Yes' or 'No' for being an outlier
influential_df$outlier <- ifelse(influential_df$country %in% outlier, "Yes", "No")
kable(influential_df)
library(ggplot2)
library(plotly)
library(knitr)
n <- nrow(hdi2018)
#Subtract to exclude the intercept
p <- length(lm2$coefficients) - 1
lev_threshold <- 2 * (p + 1) / n
high_lev <- hdi2018[lev >= lev_threshold, ]$country
outlier <- hdi2018[rstd > 2 | rstd < -2, ]$country
all_countries <- unique(c(high_lev, outlier))
influential_df <- data.frame(country = all_countries)
# Mark each country as 'Yes' or 'No' for being a high leverage point
influential_df$high_lev <- ifelse(influential_df$country %in% high_lev, "Yes", "No")
# Mark each country as 'Yes' or 'No' for being an outlier
influential_df$outlier <- ifelse(influential_df$country %in% outlier, "Yes", "No")
kable(influential_df)
n <- nrow(hdi2018)
#Subtract to exclude the intercept
p <- length(lm2$coefficients) - 1
lev_threshold <- 2 * (p + 1) / n
high_lev <- hdi2018[lev >= lev_threshold, ]$country
outlier <- hdi2018[rstd > 2 | rstd < -2, ]$country
all_countries <- unique(c(high_lev, outlier))
influential_df <- data.frame(country = all_countries)
# Mark each country as 'Yes' or 'No' for being a high leverage point
influential_df$High_Leverage <- ifelse(influential_df$country %in% high_lev, "Yes", "No")
# Mark each country as 'Yes' or 'No' for being an outlier
influential_df$Outlier <- ifelse(influential_df$country %in% outlier, "Yes", "No")
kable(influential_df)
vif(lm2)
library(faraway)
vif(lm2)
library(faraway)
library(faraway)
kable(vif(lm2))
library(faraway)
vif(lm2)
library(faraway)
vif(lm2)
cor(hdi2018[median_age,pct_internet])
library(faraway)
vif(lm2)
cor(hdi2018$median_age, hdi2018$pct_internet)
