library(MASS)
library(MASS)
head(Boston)
#Create a matrix of predictors using the dis, rm, tax, and chas columns of the Boston dataset
X <- as.matrix(Boston[, c('dis','rm','tax','chas')])
#Create a matrix of predictors using the dis, rm, tax, and chas columns of the Boston dataset
X <- as.matrix(Boston[, c('dis','rm','tax','chas')])
head(X)
#Create a matrix of predictors using the dis, rm, tax, and chas columns of the Boston dataset
X <- as.matrix(Boston[, c('dis','rm','tax','chas')])
head(X)
#Create a matrix of responses
Y <- as.matrix(Boston[, c(medv)])
#Create a matrix of predictors using the dis, rm, tax, and chas columns of the Boston dataset
X <- as.matrix(Boston[, c('dis','rm','tax','chas')])
head(X)
#Create a matrix of responses
Y <- as.matrix(Boston[, c('medv')])
head(Y)
#Create a matrix of predictors using the dis, rm, tax, and chas columns of the Boston dataset
X <- as.matrix(Boston[, c('dis','rm','tax','chas')])
head(X)
#Create a matrix of responses
Y <- as.matrix(Boston['medv'])
head(Y)
#Create a matrix of predictors using the dis, rm, tax, and chas columns of the Boston dataset
X <- as.matrix(Boston[, c('dis','rm','tax','chas')])
head(X)
#Create a matrix of responses
Y <- as.matrix(Boston['medv'])
head(Y)
#Get the transpose of the predictors matrix
X_t <- t(X)
head(X_t)
#Create a matrix of predictors using the dis, rm, tax, and chas columns of the Boston dataset
X <- as.matrix(Boston[, c('dis','rm','tax','chas')])
head(X)
#Create a matrix of responses
Y <- as.matrix(Boston['medv'])
head(Y)
#Get the transpose of the predictors matrix
X_t <- t(X)
#Apply the least-squares estimates formula
Beta <- solve(X_t %*% X) %*% X_t %*% Y
head(Beta)
#Create a matrix of predictors using the dis, rm, tax, and chas columns of the Boston dataset
X <- as.matrix(Boston[, c('dis','rm','tax','chas')])
#Create a matrix of responses
Y <- as.matrix(Boston['medv'])
#Get the transpose of the predictors matrix
X_t <- t(X)
#Apply the least-squares estimates formula
Beta <- solve(X_t %*% X) %*% X_t %*% Y
head(Beta)
#Create a matrix of predictors using the dis, rm, tax, and chas columns of the Boston dataset
X <- as.matrix(Boston[, c('dis','rm','tax','chas')])
#Create a matrix of responses
Y <- as.matrix(Boston['medv'])
#Get the transpose of the predictors matrix
X_t <- t(X)
#Apply the least-squares estimates formula
Beta <- solve(X_t %*% X) %*% X_t %*% Y
Beta
lm1 <- lm(medv ~ dis + rm + tax + chas, data=Boston)
summary(lm1)
#Create a matrix of predictors using the dis, rm, tax, and chas columns of the Boston dataset
X <- as.matrix(Boston[, c('dis','rm','tax','chas')])
#Create a matrix of responses
Y <- as.matrix(Boston['medv'])
#Get the transpose of the predictors matrix
X_t <- t(X)
#Apply the least-squares estimates formula
Beta <- solve(X_t %*% X) %*% X_t
Beta
#Create a matrix of predictors using the dis, rm, tax, and chas columns of the Boston dataset
X <- as.matrix(Boston[, c('dis','rm','tax','chas')])
#Create a matrix of responses
Y <- as.matrix(Boston['medv'])
#Get the transpose of the predictors matrix
X_t <- t(X)
#Apply the least-squares estimates formula
Beta <- solve(X_t %*% X) %*% X_t %*% Y
Beta
#Create a matrix of predictors using the dis, rm, tax, and chas columns of the Boston dataset
X <- as.matrix(Boston[, c('dis','rm','tax','chas')])
head(X)
#Create a matrix of responses
Y <- as.matrix(Boston['medv'])
#Get the transpose of the predictors matrix
X_t <- t(X)
head(X_t)
#Apply the least-squares estimates formula
Beta <- solve(X_t %*% X) %*% X_t %*% Y
#Create a matrix of predictors using the dis, rm, tax, and chas columns of the Boston dataset
X <- as.matrix(Boston[, c('dis','rm','tax','chas')])
head(X)
#Create a matrix of responses
Y <- as.matrix(Boston['medv'])
#Get the transpose of the predictors matrix
X_t <- t(X)
X_t
#Apply the least-squares estimates formula
Beta <- solve(X_t %*% X) %*% X_t %*% Y
#Create a matrix of predictors using the dis, rm, tax, and chas columns of the Boston dataset
X <- as.matrix(Boston[, c('dis','rm','tax','chas')])
head(X)
#Create a matrix of responses
Y <- as.matrix(Boston['medv'])
#Get the transpose of the predictors matrix
X_t <- t(X)
#Apply the least-squares estimates formula
Beta <- solve(X_t %*% X) %*% X_t %*% Y
Beta
#Create a matrix of predictors using the dis, rm, tax, and chas columns of the Boston dataset, including a column of 1s to account for beta_0
X <- as.matrix(Boston[, cbind(1,'dis','rm','tax','chas')])
#Create a matrix of predictors using the dis, rm, tax, and chas columns of the Boston dataset, including a column of 1s to account for beta_0
X <- as.matrix(cbind(1, Boston[, c('dis', 'rm', 'tax', 'chas')]))
head(X)
#Create a matrix of responses
Y <- as.matrix(Boston['medv'])
#Get the transpose of the predictors matrix
X_t <- t(X)
#Apply the least-squares estimates formula
Beta <- solve(X_t %*% X) %*% X_t %*% Y
Beta
#Create a matrix of predictors using the dis, rm, tax, and chas columns of the Boston dataset, including a column of 1s to account for beta_0
X <- as.matrix(cbind(1, Boston[, c('dis', 'rm', 'tax', 'chas')]))
#Create a matrix of responses
Y <- as.matrix(Boston['medv'])
#Get the transpose of the predictors matrix
X_t <- t(X)
#Apply the least-squares estimates formula
Beta <- solve(X_t %*% X) %*% X_t %*% Y
Beta
#First we obtain the factors necessary to calculate the variance of predicted values
RSS <- sum((residuals(lm1))^2)
RSS
#First we obtain the factors necessary to calculate the variance of predicted values
RSS <- sum((residuals(lm1))^2)
n <- nrow(Boston)
n
#First we obtain the factors necessary to calculate the variance of predicted values
RSS <- sum((residuals(lm1))^2)
n <- nrow(Boston)
#Calculate sigma squared manually
sigma_squared <- RSS / (n - 4 - 1)
sigma_squared
#First we obtain the factors necessary to calculate the variance of predicted values
RSS <- sum((residuals(lm1))^2)
n <- nrow(Boston)
#Calculate sigma squared manually
sigma_squared <- RSS / (n - 4 - 1)
#Now we apply the given formula to obtain the covariance matrix
Cov <- sigma_squared * solve(X_t %*% X)
Cov
#First we obtain the factors necessary to calculate the variance of predicted values
RSS <- sum((residuals(lm1))^2)
n <- nrow(Boston)
#Calculate sigma squared manually
sigma_squared <- RSS / (n - 4 - 1)
#Now we apply the given formula to obtain the covariance matrix
Cov <- sigma_squared * solve(X_t %*% X)
Cov
#From the matrix we isolate the diagonal entries and square root them to obtain the standard errors
Err <- sqrt(diag(Cov))
Err
#First we obtain the factors necessary to calculate the variance of predicted values
RSS <- sum((residuals(lm1))^2)
n <- nrow(Boston)
#Calculate sigma squared manually
sigma_squared <- RSS / (n - 4 - 1)
#Now we apply the given formula to obtain the covariance matrix
Cov <- sigma_squared * solve(X_t %*% X)
#From the matrix we isolate the diagonal entries and square root them to obtain the standard errors
Err <- sqrt(diag(Cov))
Err
